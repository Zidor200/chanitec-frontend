# Chanitec Backend Connection Information for Frontend
# Updated to match backend implementation as of current analysis.

API_BASE_URL = "http://localhost:5000/api"  # The base URL for the backend API (update as needed)
API_VERSION = null  # No explicit versioning in backend routes

# Authentication
AUTH_METHOD = null  # No authentication enforced by backend as per current code
AUTH_TOKEN_PLACEHOLDER = null  # Not required unless implemented later

# Endpoints (CRUD for each resource, matching backend)
ENDPOINTS = {
    # Clients
    "List Clients":        {"method": "GET",    "path": "/clients"},
    "Get Client":          {"method": "GET",    "path": "/clients/{id}"},
    "Create Client":       {"method": "POST",   "path": "/clients"},
    "Update Client":       {"method": "PUT",    "path": "/clients/{id}"},
    "Delete Client":       {"method": "DELETE", "path": "/clients/{id}"},
    # NOTE: As of latest backend update, 'Create Client' and 'Update Client' accept 'name' (required) and 'Taux_change' (optional decimal) fields in the request body.

    # Sites
    "List Sites":          {"method": "GET",    "path": "/sites"},
    "Get Site":            {"method": "GET",    "path": "/sites/{id}"},
    "Create Site":         {"method": "POST",   "path": "/sites"},
    "Update Site":         {"method": "PUT",    "path": "/sites/{id}"},
    "Delete Site":         {"method": "DELETE", "path": "/sites/{id}"},
    "Get Sites By Client": {"method": "GET",    "path": "/sites/by-client?clientId={clientId}"},

    # Items
    "List Items":          {"method": "GET",    "path": "/items"},
    "Get Item":            {"method": "GET",    "path": "/items/{id}"},
    "Create Item":         {"method": "POST",   "path": "/items"},
    "Update Item":         {"method": "PUT",    "path": "/items/{id}"},
    "Delete Item":         {"method": "DELETE", "path": "/items/{id}"},
    "Import Items":        {"method": "POST",   "path": "/items/import"},
    "Clear Items":         {"method": "DELETE", "path": "/items/clear"},
    # NOTE: As of latest backend update, 'Create Item' and 'Update Item' require 'description', 'price', and 'quantity' fields in the request body.

    # Quotes
    "List Quotes":         {"method": "GET",    "path": "/quotes"},
    "Get Quote":           {"method": "GET",    "path": "/quotes/{id}"},
    "Create Quote":        {"method": "POST",   "path": "/quotes"},
    "Update Quote":        {"method": "PUT",    "path": "/quotes/{id}"},
    "Delete Quote":        {"method": "DELETE", "path": "/quotes/{id}"},
    "Set Quote Reminder":  {"method": "PATCH",  "path": "/quotes/{id}/reminder"},
    "Confirm Quote":       {"method": "PATCH",  "path": "/quotes/{id}/confirm"},

    # Supply Items
    "List Supply Items By Quote":   {"method": "GET",    "path": "/supply-items/{quoteId}"},
    "Get Supply Item":              {"method": "GET",    "path": "/supply-items/item/{id}"},
    "Create Supply Item":           {"method": "POST",   "path": "/supply-items/{quoteId}"},
    "Update Supply Item":           {"method": "PUT",    "path": "/supply-items/{id}"},
    "Delete Supply Item":           {"method": "DELETE", "path": "/supply-items/{id}"},

    # Labor Items
    "List Labor Items By Quote":    {"method": "GET",    "path": "/labor-items/{quoteId}"},
    "Get Labor Item":               {"method": "GET",    "path": "/labor-items/item/{id}"},
    "Create Labor Item":            {"method": "POST",   "path": "/labor-items/{quoteId}"},
    "Update Labor Item":            {"method": "PUT",    "path": "/labor-items/{id}"},
    "Delete Labor Item":            {"method": "DELETE", "path": "/labor-items/{id}"},

    # Departments
    "List Departments":     {"method": "GET",    "path": "/departments"},
    "Get Department":       {"method": "GET",    "path": "/departments/{id}"},
    "Create Department":    {"method": "POST",   "path": "/departments"},
    "Update Department":    {"method": "PUT",    "path": "/departments/{id}"},
    "Delete Department":    {"method": "DELETE", "path": "/departments/{id}"},

    # Employees
    "List Employees":       {"method": "GET",    "path": "/employees"},
    "Get Employee":         {"method": "GET",    "path": "/employees/{id}"},
    "Create Employee":      {"method": "POST",   "path": "/employees"},
    "Update Employee":      {"method": "PUT",    "path": "/employees/{id}"},
    "Delete Employee":      {"method": "DELETE", "path": "/employees/{id}"},

    # Splits
    "List Splits":         {"method": "GET",    "path": "/splits"},
    "Get Split":           {"method": "GET",    "path": "/splits/{code}"},
    "Create Split":        {"method": "POST",   "path": "/splits"},
    "Update Split":        {"method": "PUT",    "path": "/splits/{code}"},
    "Delete Split":        {"method": "DELETE", "path": "/splits/{code}"},
    "Get Site For Split":  {"method": "GET",    "path": "/splits/{code}/site"},

    # Debug
    "Get Database Structure": {"method": "GET", "path": "/debug/database-structure"},
    "Test Site Lookup":       {"method": "GET", "path": "/debug/test-site-lookup/{clientId}"}
}

# CORS Settings (Cross-Origin Resource Sharing)
CORS = {
    "allowed_origins": ["http://localhost:3000", "http://localhost:5000"],  # List of allowed origins
    "allowed_methods": ["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],  # HTTP methods allowed
    "allowed_headers": ["Content-Type", "Authorization"],  # Headers allowed in requests
    "allow_credentials": true  # Whether to allow credentials (cookies, authorization headers, etc.)
}

# Additional Metadata (if needed)
# DATABASE_TYPE = "MySQL"
# DATABASE_HOST = "<DB_HOST>"
# DATABASE_PORT = 3306
# DATABASE_NAME = "Chanitec"
# (Note: Frontend should NOT connect directly to the database for security reasons)

# Add any other relevant connection or environment details below
# ...
# DATABASE_NAME = "Chanitec"
# (Note: Frontend should NOT connect directly to the database for security reasons)

# Add any other relevant connection or environment details below
# ...